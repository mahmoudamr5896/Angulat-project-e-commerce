{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\nlet ProductsComponent = class ProductsComponent {\n  // @Input() ProductOfCategory: any[] = []; // Input property to receive products of the selected category\n  constructor(productservice, routes, apiservice, cartService) {\n    this.productservice = productservice;\n    this.routes = routes;\n    this.apiservice = apiservice;\n    this.cartService = cartService;\n    this.Productordered = [];\n    this.Product = [];\n    this.ProductOfCaegory = [];\n    this.totalprice = 0;\n    this.userId = '';\n    this.selectId = 0;\n    this.orderedProduct = new EventEmitter();\n    this.countProduct = new EventEmitter();\n  }\n  ngOnChanges() {\n    // this.FilterProductByCategory()\n    console.log(this.selectId);\n    // this.ProductOfCaegory=this.productservice.getProductBycategory(this.selectId)\n    this.apiservice.getproductsbycategoryids(this.selectId).subscribe(prod => {\n      console.log(prod);\n      if (this.selectId == 0) {\n        this.apiservice.getallproduct().subscribe(prod => {\n          this.ProductOfCaegory = prod;\n        });\n      } else {\n        this.ProductOfCaegory = prod;\n      }\n    });\n  }\n  ngOnInit() {\n    // this.ProductOfCaegory=this.productservice.getProductBycategory(this.selectId)\n    this.apiservice.getproductsbycategoryids(this.selectId).subscribe(prod => {\n      console.log(prod);\n      if (this.selectId) {\n        this.ProductOfCaegory = prod;\n      } else {\n        this.apiservice.getallproduct().subscribe(prod => {\n          this.ProductOfCaegory = prod;\n        });\n      }\n    });\n    let User = localStorage.getItem('user');\n    if (User) {\n      this.userId = JSON.parse(User);\n      console.log(this.userId);\n    }\n  }\n  Addtocart(product, numitem) {\n    // Check if the product is available in stock before adding to cart\n    if (product) {\n      let User = localStorage.getItem('user');\n      if (User) {\n        let user_id = JSON.parse(User);\n        console.log(user_id);\n        product.UserIds = user_id.id;\n        product.status = true;\n        product.numitem = numitem;\n      }\n      this.cartService.AddtoOrders(product).subscribe(prod => {\n        console.log('Hi Sir ');\n      });\n    } else {\n      alert('This product is out of stock!');\n    }\n  }\n  openproductId(id) {\n    this.routes.navigate(['/products', id]);\n  }\n};\n__decorate([Input()], ProductsComponent.prototype, \"selectId\", void 0);\n__decorate([Output()], ProductsComponent.prototype, \"orderedProduct\", void 0);\n__decorate([Output()], ProductsComponent.prototype, \"countProduct\", void 0);\nProductsComponent = __decorate([Component({\n  selector: \"app-products\",\n  templateUrl: \"./products.component.html\",\n  styleUrls: [\"./products.component.css\"]\n})], ProductsComponent);\nexport { ProductsComponent };\n// private FilterProductByCategory() {\n//   this.ProductOfCaegory =ProductsService.getProductBycategory(this.selectId)\n// //   if (this.selectId == 0) \n// //     {\n// //       this.ProductOfCaegory = this.Product;\n// //       console.log('Hello 0',this.selectId)\n// //     }      \n// //   else\n// //   {\n// //         console.log('Error',this.selectId)\n// //     this.ProductOfCaegory = this.Product.filter(\n// //       (item) => (item.Category == this.selectId)\n// //     );\n// //   }\n// } // Addtocart(id: number, quantity: any,item:any) {\n//   const productIndex = this.Product.findIndex((product) => product.id === id);\n//   if (productIndex !== -1){\n//     if (quantity > 0 && quantity <= this.Product[productIndex].quantity) {\n//       this.Product[productIndex].quantity -= quantity;\n//       this.totalprice = this.Product[productIndex].price * quantity;\n//       this.orderedProduct.emit(item);\n//       this.countProduct.emit(quantity)\n//       console.log(\n//         `Item with ID ${id} and quantity ${quantity} has been purchased.`\n//       );\n//     } else {\n//       console.log(`Invalid quantity for item with ID ${id}.`);\n//     }\n//   } else {\n//     console.log(`Item with ID ${id} not found.`);\n//   }\n// }","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Input","Output","ProductsComponent","constructor","productservice","routes","apiservice","cartService","ngOnChanges","console","log","selectId","getproductsbycategoryids","subscribe","prod","getallproduct","ProductOfCaegory","ngOnInit","User","localStorage","getItem","userId","JSON","parse","Addtocart","product","numitem","user_id","UserIds","id","status","AddtoOrders","alert","openproductId","navigate","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/mahmoud/Downloads/app-start/src/app/Components/products/products.component.ts"],"sourcesContent":["import { ApiProductsService } from './../../Services/api-products.service';\nimport { routes } from './../../app-routing.module';\nimport { ProductsService } from './../../Services/products.service';\nimport { Icategory } from \"src/app/Models/icategory\";\nimport { Iproduct } from \"./../../Models/iproduct\";\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChange } from \"@angular/core\";\nimport { Route, Router } from '@angular/router';\nimport { Iorders } from 'src/app/Models/iorders';\nimport { OrdersService } from 'src/app/Services/orders.service';\n\n@Component({\n  selector: \"app-products\",\n  templateUrl: \"./products.component.html\",\n  styleUrls: [\"./products.component.css\"],\n})\nexport class ProductsComponent implements OnChanges ,OnInit{\n  Productordered: Iorders[] =[];\n  Product: Iproduct[] = [];\n  ProductOfCaegory: Iproduct[] = [];\n  totalprice: number = 0;\n  userId:string=''\n  @Input() selectId: number = 0;\n  @Output() orderedProduct: EventEmitter<any> = new EventEmitter<any>();\n  @Output() countProduct: EventEmitter<number> = new EventEmitter<number>();\nid: any;\n  // @Input() ProductOfCategory: any[] = []; // Input property to receive products of the selected category\n  constructor(private productservice:ProductsService\n    ,\n              private routes:Router,\n              private apiservice : ApiProductsService,\n              private cartService:OrdersService\n  ){\n \n\n  }\n\n  ngOnChanges(): void {\n    // this.FilterProductByCategory()\n    console.log(this.selectId)\n    // this.ProductOfCaegory=this.productservice.getProductBycategory(this.selectId)\n    this.apiservice.getproductsbycategoryids(this.selectId).subscribe((prod)=>{\n      console.log(prod)\n      if(this.selectId == 0){\n        this.apiservice.getallproduct().subscribe((prod)=>{\n          this.ProductOfCaegory = prod\n        })\n      }else{\n        this.ProductOfCaegory = prod\n\n      }\n   });\n  }\n  ngOnInit(): void {\n    // this.ProductOfCaegory=this.productservice.getProductBycategory(this.selectId)\n    this.apiservice.getproductsbycategoryids(this.selectId).subscribe((prod)=>{\n      console.log(prod)\n      if(this.selectId){\n        this.ProductOfCaegory = prod\n      }else{\n        this.apiservice.getallproduct().subscribe((prod)=>{\n          this.ProductOfCaegory = prod\n        })\n      }\n   });\n   let User = localStorage.getItem('user')\n   if(User){\n    this.userId = JSON.parse(User) \n    console.log(this.userId)\n   }\n  }\n\n  Addtocart(product: Iorders,numitem:string): void {\n    // Check if the product is available in stock before adding to cart\n    if (product) {\n      let User = localStorage.getItem('user')\n      if(User){\n     let user_id = JSON.parse(User) \n       console.log(user_id)\n       product.UserIds = user_id.id\n       product.status=true\n       product.numitem=numitem\n      }\n      this.cartService.AddtoOrders(product).subscribe((prod)=>{\n        console.log('Hi Sir ')\n      });\n    } else {\n      alert('This product is out of stock!');\n    }\n  }\n\n  openproductId(id:number){\n   this.routes.navigate(['/products',id])\n   }\n  \n}\n // private FilterProductByCategory() {\n  //   this.ProductOfCaegory =ProductsService.getProductBycategory(this.selectId)\n\n  // //   if (this.selectId == 0) \n  // //     {\n  // //       this.ProductOfCaegory = this.Product;\n  // //       console.log('Hello 0',this.selectId)\n\n  // //     }      \n  // //   else\n  // //   {\n  // //         console.log('Error',this.selectId)\n  // //     this.ProductOfCaegory = this.Product.filter(\n  // //       (item) => (item.Category == this.selectId)\n  // //     );\n  // //   }\n  \n  // } // Addtocart(id: number, quantity: any,item:any) {\n  //   const productIndex = this.Product.findIndex((product) => product.id === id);\n  //   if (productIndex !== -1){\n  //     if (quantity > 0 && quantity <= this.Product[productIndex].quantity) {\n  //       this.Product[productIndex].quantity -= quantity;\n  //       this.totalprice = this.Product[productIndex].price * quantity;\n  //       this.orderedProduct.emit(item);\n  //       this.countProduct.emit(quantity)\n  //       console.log(\n  //         `Item with ID ${id} and quantity ${quantity} has been purchased.`\n  //       );\n  //     } else {\n  //       console.log(`Invalid quantity for item with ID ${id}.`);\n  //     }\n  //   } else {\n  //     console.log(`Item with ID ${id} not found.`);\n  //   }\n  // }"]},"metadata":{},"sourceType":"module","externalDependencies":[]}