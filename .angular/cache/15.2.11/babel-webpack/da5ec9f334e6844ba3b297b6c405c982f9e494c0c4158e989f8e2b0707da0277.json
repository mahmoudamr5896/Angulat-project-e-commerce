{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../Services/products.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./../../Services/api-products.service\";\nimport * as i4 from \"src/app/Services/orders.service\";\nimport * as i5 from \"@angular/common\";\nfunction ProductsComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 4);\n    i0.ɵɵelement(2, \"img\", 5);\n    i0.ɵɵelementStart(3, \"div\", 6)(4, \"h5\", 7);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 8);\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"currency\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\", 8);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 9);\n    i0.ɵɵelement(12, \"input\", 10, 11);\n    i0.ɵɵelementStart(14, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function ProductsComponent_div_2_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.Addtocart());\n    });\n    i0.ɵɵtext(15, \"Add to Cart\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function ProductsComponent_div_2_Template_button_click_16_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const prod_r1 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.openproductId(prod_r1.id));\n    });\n    i0.ɵɵtext(17, \"Details\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const prod_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", prod_r1.quantity == 1 ? \"yellow\" : \"white\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", prod_r1 == null ? null : prod_r1.imgURL, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(prod_r1 == null ? null : prod_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Price: \", i0.ɵɵpipeBind1(8, 11, prod_r1 == null ? null : prod_r1.price), \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Quantity: \", prod_r1 == null ? null : prod_r1.quantity, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassProp(\"d-none\", (prod_r1 == null ? null : prod_r1.quantity) == 0);\n    i0.ɵɵpropertyInterpolate(\"max\", prod_r1 == null ? null : prod_r1.quantity);\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassProp(\"d-none\", (prod_r1 == null ? null : prod_r1.quantity) == 0);\n  }\n}\nexport class ProductsComponent {\n  // @Input() ProductOfCategory: any[] = []; // Input property to receive products of the selected category\n  constructor(productservice, routes, apiservice, cartService) {\n    this.productservice = productservice;\n    this.routes = routes;\n    this.apiservice = apiservice;\n    this.cartService = cartService;\n    this.Product = [];\n    this.ProductOfCaegory = [];\n    this.totalprice = 0;\n    this.userId = '';\n    this.selectId = 0;\n    this.orderedProduct = new EventEmitter();\n    this.countProduct = new EventEmitter();\n  }\n  ngOnChanges() {\n    // this.FilterProductByCategory()\n    console.log(this.selectId);\n    // this.ProductOfCaegory=this.productservice.getProductBycategory(this.selectId)\n    this.apiservice.getproductsbycategoryids(this.selectId).subscribe(prod => {\n      console.log(prod);\n      if (this.selectId == 0) {\n        this.apiservice.getallproduct().subscribe(prod => {\n          this.ProductOfCaegory = prod;\n        });\n      } else {\n        this.ProductOfCaegory = prod;\n      }\n    });\n  }\n  ngOnInit() {\n    // this.ProductOfCaegory=this.productservice.getProductBycategory(this.selectId)\n    this.apiservice.getproductsbycategoryids(this.selectId).subscribe(prod => {\n      console.log(prod);\n      if (this.selectId) {\n        this.ProductOfCaegory = prod;\n      } else {\n        this.apiservice.getallproduct().subscribe(prod => {\n          this.ProductOfCaegory = prod;\n        });\n      }\n    });\n    let User = localStorage.getItem('user');\n    if (User) {\n      this.userId = User;\n      console.log(this.userId);\n    }\n  }\n  // Addtocart(id: number, quantity: any,item:any) {\n  //   const productIndex = this.Product.findIndex((product) => product.id === id);\n  //   if (productIndex !== -1){\n  //     if (quantity > 0 && quantity <= this.Product[productIndex].quantity) {\n  //       this.Product[productIndex].quantity -= quantity;\n  //       this.totalprice = this.Product[productIndex].price * quantity;\n  //       this.orderedProduct.emit(item);\n  //       this.countProduct.emit(quantity)\n  //       console.log(\n  //         `Item with ID ${id} and quantity ${quantity} has been purchased.`\n  //       );\n  //     } else {\n  //       console.log(`Invalid quantity for item with ID ${id}.`);\n  //     }\n  //   } else {\n  //     console.log(`Item with ID ${id} not found.`);\n  //   }\n  // }\n  addToCart(product) {\n    // Check if the product is available in stock before adding to cart\n    if (product.quantity > 0) {\n      // Call the cart service method to add the product to the cart\n      this.cartService.addToCart(product);\n      // Decrease the quantity of the product in the view or update the product availability status\n      // This step depends on how you handle product quantity in your application\n    } else {\n      // Notify the user that the product is out of stock or not available\n      alert('This product is out of stock!');\n    }\n  }\n  openproductId(id) {\n    this.routes.navigate(['/products', id]);\n  }\n  static #_ = this.ɵfac = function ProductsComponent_Factory(t) {\n    return new (t || ProductsComponent)(i0.ɵɵdirectiveInject(i1.ProductsService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ApiProductsService), i0.ɵɵdirectiveInject(i4.OrdersService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProductsComponent,\n    selectors: [[\"app-products\"]],\n    inputs: {\n      selectId: \"selectId\"\n    },\n    outputs: {\n      orderedProduct: \"orderedProduct\",\n      countProduct: \"countProduct\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"container\", \"mt-5\"], [1, \"row\"], [\"class\", \"col-md-6 col-lg-4 mb-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-6\", \"col-lg-4\", \"mb-4\"], [1, \"card\"], [\"alt\", \"Product Image\", 1, \"card-img-top\", 3, \"src\"], [1, \"card-body\"], [1, \"card-title\"], [1, \"card-text\"], [1, \"input-group\", \"mb-3\"], [\"type\", \"number\", \"name\", \"quantity\", \"min\", \"1\", 1, \"form-control\", 3, \"max\"], [\"item\", \"\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-success\", \"mt-2\", 3, \"click\"], [1, \"btn\", \"btn-primary\", 3, \"click\"]],\n    template: function ProductsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtemplate(2, ProductsComponent_div_2_Template, 18, 13, \"div\", 2);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(3, \"hr\")(4, \"hr\")(5, \"hr\")(6, \"hr\");\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.ProductOfCaegory);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.CurrencyPipe],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AAKA,SAAoBA,YAAY,QAAwD,eAAe;;;;;;;;;;ICF/FC,8BAAwF;IAEhFA,yBAAmE;IACnEA,8BAAuB;IACIA,YAAgB;IAAAA,iBAAK;IAC5CA,4BAAqB;IAAAA,YAAmC;;IAAAA,iBAAI;IAC5DA,4BAAqB;IAAAA,aAA8B;IAAAA,iBAAI;IACvDA,+BAA8B;IAC1BA,iCAAwI;IACxIA,mCAAsH;IAAtBA;MAAAA;MAAA;MAAA,OAASA,iCAAW;IAAA,EAAC;IAACA,4BAAW;IAAAA,iBAAS;IAE9IA,mCAAiE;IAAjCA;MAAA;MAAA;MAAA;MAAA,OAASA,+CAAsB;IAAA,EAAC;IAACA,wBAAO;IAAAA,iBAAS;;;;IAVtEA,eAAoE;IAApEA,8EAAoE;IAC9EA,eAAoB;IAApBA,+EAAoB;IAEEA,eAAgB;IAAhBA,2DAAgB;IAClBA,eAAmC;IAAnCA,mGAAmC;IACnCA,eAA8B;IAA9BA,kFAA8B;IAEiBA,eAAoC;IAApCA,0EAAoC;IAASA,0EAA0B;IAC5EA,eAAoC;IAApCA,0EAAoC;;;ADGvH,OAAM,MAAOC,iBAAiB;EAS5B;EACAC,YAAoBC,cAA8B,EAE9BC,MAAa,EACbC,UAA+B,EAC/BC,WAAyB;IAJzB,mBAAc,GAAdH,cAAc;IAEd,WAAM,GAANC,MAAM;IACN,eAAU,GAAVC,UAAU;IACV,gBAAW,GAAXC,WAAW;IAZ/B,YAAO,GAAe,EAAE;IACxB,qBAAgB,GAAe,EAAE;IACjC,eAAU,GAAW,CAAC;IACtB,WAAM,GAAQ,EAAE;IACP,aAAQ,GAAW,CAAC;IACnB,mBAAc,GAAsB,IAAIP,YAAY,EAAO;IAC3D,iBAAY,GAAyB,IAAIA,YAAY,EAAU;EAUzE;EAEAQ,WAAW;IACT;IACAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,QAAQ,CAAC;IAC1B;IACA,IAAI,CAACL,UAAU,CAACM,wBAAwB,CAAC,IAAI,CAACD,QAAQ,CAAC,CAACE,SAAS,CAAEC,IAAI,IAAG;MACxEL,OAAO,CAACC,GAAG,CAACI,IAAI,CAAC;MACjB,IAAG,IAAI,CAACH,QAAQ,IAAI,CAAC,EAAC;QACpB,IAAI,CAACL,UAAU,CAACS,aAAa,EAAE,CAACF,SAAS,CAAEC,IAAI,IAAG;UAChD,IAAI,CAACE,gBAAgB,GAAGF,IAAI;QAC9B,CAAC,CAAC;OACH,MAAI;QACH,IAAI,CAACE,gBAAgB,GAAGF,IAAI;;IAGjC,CAAC,CAAC;EACH;EACAG,QAAQ;IACN;IACA,IAAI,CAACX,UAAU,CAACM,wBAAwB,CAAC,IAAI,CAACD,QAAQ,CAAC,CAACE,SAAS,CAAEC,IAAI,IAAG;MACxEL,OAAO,CAACC,GAAG,CAACI,IAAI,CAAC;MACjB,IAAG,IAAI,CAACH,QAAQ,EAAC;QACf,IAAI,CAACK,gBAAgB,GAAGF,IAAI;OAC7B,MAAI;QACH,IAAI,CAACR,UAAU,CAACS,aAAa,EAAE,CAACF,SAAS,CAAEC,IAAI,IAAG;UAChD,IAAI,CAACE,gBAAgB,GAAGF,IAAI;QAC9B,CAAC,CAAC;;IAEP,CAAC,CAAC;IACF,IAAII,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACvC,IAAGF,IAAI,EAAC;MACP,IAAI,CAACG,MAAM,GAAGH,IAAI;MAClBT,OAAO,CAACC,GAAG,CAAC,IAAI,CAACW,MAAM,CAAC;;EAE1B;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,CAACC,OAAgB;IACxB;IACA,IAAIA,OAAO,CAACC,QAAQ,GAAG,CAAC,EAAE;MACxB;MACA,IAAI,CAACjB,WAAW,CAACe,SAAS,CAACC,OAAO,CAAC;MACnC;MACA;KACD,MAAM;MACL;MACAE,KAAK,CAAC,+BAA+B,CAAC;;EAE1C;EAGAC,aAAa,CAACC,EAAS;IACtB,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,WAAW,EAACD,EAAE,CAAC,CAAC;EACtC;EAAC;qBAzFSzB,iBAAiB;EAAA;EAAA;UAAjBA,iBAAiB;IAAA2B;IAAAC;MAAAnB;IAAA;IAAAoB;MAAAC;MAAAC;IAAA;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCd9BrC,8BAA4B;QAEpBA,oEAcM;QACVA,iBAAM;QAqCVA,qBAAI;;;QApDyDA,eAAoB;QAApBA,8CAAoB","names":["EventEmitter","i0","ProductsComponent","constructor","productservice","routes","apiservice","cartService","ngOnChanges","console","log","selectId","getproductsbycategoryids","subscribe","prod","getallproduct","ProductOfCaegory","ngOnInit","User","localStorage","getItem","userId","addToCart","product","quantity","alert","openproductId","id","navigate","selectors","inputs","outputs","orderedProduct","countProduct","features","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/mahmoud/Downloads/app-start/src/app/Components/products/products.component.ts","/home/mahmoud/Downloads/app-start/src/app/Components/products/products.component.html"],"sourcesContent":["import { ApiProductsService } from './../../Services/api-products.service';\nimport { routes } from './../../app-routing.module';\nimport { ProductsService } from './../../Services/products.service';\nimport { Icategory } from \"src/app/Models/icategory\";\nimport { Iproduct } from \"./../../Models/iproduct\";\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChange } from \"@angular/core\";\nimport { Route, Router } from '@angular/router';\nimport { Iorders } from 'src/app/Models/iorders';\nimport { OrdersService } from 'src/app/Services/orders.service';\n\n@Component({\n  selector: \"app-products\",\n  templateUrl: \"./products.component.html\",\n  styleUrls: [\"./products.component.css\"],\n})\nexport class ProductsComponent implements OnChanges ,OnInit{\n  Productordered: Iorders[] | undefined;\n  Product: Iproduct[] = [];\n  ProductOfCaegory: Iproduct[] = [];\n  totalprice: number = 0;\n  userId:string=''\n  @Input() selectId: number = 0;\n  @Output() orderedProduct: EventEmitter<any> = new EventEmitter<any>();\n  @Output() countProduct: EventEmitter<number> = new EventEmitter<number>();\n  // @Input() ProductOfCategory: any[] = []; // Input property to receive products of the selected category\n  constructor(private productservice:ProductsService\n    ,\n              private routes:Router,\n              private apiservice : ApiProductsService,\n              private cartService:OrdersService\n  ){\n \n\n  }\n\n  ngOnChanges(): void {\n    // this.FilterProductByCategory()\n    console.log(this.selectId)\n    // this.ProductOfCaegory=this.productservice.getProductBycategory(this.selectId)\n    this.apiservice.getproductsbycategoryids(this.selectId).subscribe((prod)=>{\n      console.log(prod)\n      if(this.selectId == 0){\n        this.apiservice.getallproduct().subscribe((prod)=>{\n          this.ProductOfCaegory = prod\n        })\n      }else{\n        this.ProductOfCaegory = prod\n\n      }\n   });\n  }\n  ngOnInit(): void {\n    // this.ProductOfCaegory=this.productservice.getProductBycategory(this.selectId)\n    this.apiservice.getproductsbycategoryids(this.selectId).subscribe((prod)=>{\n      console.log(prod)\n      if(this.selectId){\n        this.ProductOfCaegory = prod\n      }else{\n        this.apiservice.getallproduct().subscribe((prod)=>{\n          this.ProductOfCaegory = prod\n        })\n      }\n   });\n   let User = localStorage.getItem('user')\n   if(User){\n    this.userId = User\n    console.log(this.userId)\n   }\n  }\n\n  // Addtocart(id: number, quantity: any,item:any) {\n  //   const productIndex = this.Product.findIndex((product) => product.id === id);\n  //   if (productIndex !== -1){\n  //     if (quantity > 0 && quantity <= this.Product[productIndex].quantity) {\n  //       this.Product[productIndex].quantity -= quantity;\n  //       this.totalprice = this.Product[productIndex].price * quantity;\n  //       this.orderedProduct.emit(item);\n  //       this.countProduct.emit(quantity)\n  //       console.log(\n  //         `Item with ID ${id} and quantity ${quantity} has been purchased.`\n  //       );\n  //     } else {\n  //       console.log(`Invalid quantity for item with ID ${id}.`);\n  //     }\n  //   } else {\n  //     console.log(`Item with ID ${id} not found.`);\n  //   }\n  // }\n  addToCart(product: Iorders): void {\n    // Check if the product is available in stock before adding to cart\n    if (product.quantity > 0) {\n      // Call the cart service method to add the product to the cart\n      this.cartService.addToCart(product);\n      // Decrease the quantity of the product in the view or update the product availability status\n      // This step depends on how you handle product quantity in your application\n    } else {\n      // Notify the user that the product is out of stock or not available\n      alert('This product is out of stock!');\n    }\n  }\n\n \n  openproductId(id:number){\n   this.routes.navigate(['/products',id])\n   }\n  \n}\n // private FilterProductByCategory() {\n  //   this.ProductOfCaegory =ProductsService.getProductBycategory(this.selectId)\n\n  // //   if (this.selectId == 0) \n  // //     {\n  // //       this.ProductOfCaegory = this.Product;\n  // //       console.log('Hello 0',this.selectId)\n\n  // //     }      \n  // //   else\n  // //   {\n  // //         console.log('Error',this.selectId)\n  // //     this.ProductOfCaegory = this.Product.filter(\n  // //       (item) => (item.Category == this.selectId)\n  // //     );\n  // //   }\n  \n  // }","<!-- Product Page -->\n<div class=\"container mt-5\">\n    <div class=\"row\">\n        <div class=\"col-md-6 col-lg-4 mb-4\" *ngFor=\"let prod of ProductOfCaegory let i = index\">\n            <div class=\"card\"  [style.background-color]=\"(prod.quantity == 1) ? 'yellow' : 'white'\">\n                <img [src]=\"prod?.imgURL\" class=\"card-img-top\" alt=\"Product Image\">\n                <div class=\"card-body\">\n                    <h5 class=\"card-title\">{{ prod?.name }}</h5>\n                    <p class=\"card-text\">Price: {{ prod?.price | currency }}</p>\n                    <p class=\"card-text\">Quantity: {{ prod?.quantity }}</p>\n                    <div class=\"input-group mb-3\">\n                        <input type=\"number\" #item class=\"form-control\" name=\"quantity\" [class.d-none]=\"prod?.quantity == 0\" min=\"1\" max=\"{{ prod?.quantity }}\">\n                        <button class=\"btn btn-outline-success mt-2\" type=\"button\" [class.d-none]=\"prod?.quantity == 0\" (click)=\"Addtocart()\">Add to Cart</button>\n                    </div>\n                    <button class=\"btn btn-primary\" (click)=\"openproductId(prod.id)\">Details</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<!--  -->\n<!-- <h3>Products List</h3> -->\n<!-- <table class=\"table mt-5\">\n    <thead>\n        <th>Id</th>\n        <th>Name</th>\n        <th>Img</th>\n        <th>Price</th>\n        <th>Stock</th>\n        <th>No.items</th>\n        <th>Detail</th>\n        <th>Add to Cart</th>\n    </thead>\n    <tbody >\n        <tr *ngFor=\"let prod of ProductOfCaegory let i = index\"\n                 [class.d-none]=\"prod?.quantity == 0\"\n                 [style.background-color]=\"(prod.quantity == 1) ? 'yellow' : 'white'\">\n            <td>{{i+1}}</td>\n            <td>{{prod?.name}}</td>\n            <td><img [src]=\"prod?.imgURL\" alt=\"\" width=\"100px\"></td>\n            <td>{{prod?.price | currency}}</td>\n            <td>{{prod?.quantity}}</td>\n            <td>\n                <div>\n                    <input type=\"number\" #item  name=\"quantity\"  min=\"1\" max=\"{{prod?.quantity}}\">\n                </div>\n            </td>\n            <td><button class=\"btn btn-primary\" (click)=\"openproductId(prod.id)\">Detail</button></td>\n            <td><button class=\"btn btn-success\" (click)=\"buyItem(prod.id,item.value,prod)\">Add to Card</button></td>\n        </tr>\n\n    </tbody>\n</table> -->\n\n\n<hr>\n<!-- <h3>\n    Total Price : {{totalprice}}\n</h3> -->\n<hr>\n<hr>\n<hr>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}