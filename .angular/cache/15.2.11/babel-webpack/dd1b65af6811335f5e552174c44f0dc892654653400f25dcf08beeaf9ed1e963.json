{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Services/orders.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/Services/api-products.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction OrdersListComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6);\n    i0.ɵɵelement(2, \"img\", 7);\n    i0.ɵɵelementStart(3, \"div\", 8)(4, \"h5\", 9);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 10);\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"currency\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\", 10);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 11);\n    i0.ɵɵelement(12, \"input\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function OrdersListComponent_div_2_Template_button_click_13_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const prod_r1 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.openproductId(prod_r1.id));\n    });\n    i0.ɵɵtext(14, \"Details\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const prod_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"hidden\", prod_r1.status === false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", prod_r1.quantity == 1 ? \"yellow\" : \"white\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", prod_r1.imgURL, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(prod_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Price: \", i0.ɵɵpipeBind1(8, 8, prod_r1.price), \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Stock: \", prod_r1.quantity, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"max\", prod_r1.quantity);\n  }\n}\nexport class OrdersListComponent {\n  constructor(apiorder, routes, apiproduct) {\n    this.apiorder = apiorder;\n    this.routes = routes;\n    this.apiproduct = apiproduct;\n  }\n  ngOnInit() {\n    let User = localStorage.getItem('user');\n    if (User) {\n      let user_id = JSON.parse(User);\n      console.log(user_id.id);\n      this.apiorder.getOrdersByUserIdAndStatusFalse(user_id.id).subscribe(prod => {\n        this.orders = prod;\n        this.product = prod;\n      });\n      this.apiproduct.getproductbyid(this.orders.id).subscribe(prod => {\n        this.product = prod;\n      });\n      // this.apiproduct.getallproduct().subscribe((prod)=>{\n      // this.product = prod\n      // })\n    }\n  }\n\n  ngOnChanges() {}\n  calculateTotalPrice() {\n    let total = 0;\n    if (this.orders) {\n      for (let order of this.orders) {\n        if (order.status == true) {\n          total += order.price;\n        }\n      }\n    }\n    return total;\n  }\n  // purchaseItems(): void {\n  //   if (confirm(\"Are you sure you want to purchase these items?\")) {\n  //     for (let order of this.product) {\n  //       const newQuantity = Number(order.quantity - order.countitem);\n  //       this.apiproduct.updateProductQuantity(order.id, newQuantity).subscribe(\n  //         () => {\n  //           console.log(`Quantity updated for product with ID: ${order.id}`);\n  //         }\n  //       );\n  //     }\n  //     // Remove all orders associated with the current user\n  //     let userId = localStorage.getItem('user');\n  //     if (userId) {\n  //       let userid= JSON.parse(userId)\n  //       console.log(typeof(userid.id))\n  //       this.apiorder.removeallbyuserid(userid.id).subscribe(\n  //         () => {\n  //           console.log('All orders removed successfully');\n  //         }\n  //       );\n  //       this.apiorder.removeall().subscribe(\n  //         () => {\n  //           console.log('All orders removed successfully');\n  //         }\n  //       );\n  //     } else {\n  //       console.error(\"User ID not found in local storage\");\n  //     }\n  //   }\n  // }\n  purchaseItems() {\n    if (confirm(\"Are you sure you want to purchase these items?\")) {\n      for (let order of this.product) {\n        const newQuantity = Number(order.quantity - 3);\n        this.apiproduct.updateProductQuantity(order.id, newQuantity).subscribe(() => {\n          console.log(`Quantity updated for product with ID: ${order.id}`);\n        });\n      }\n      // Change status of orders to false\n      let userId = localStorage.getItem('user');\n      if (userId) {\n        let userid = JSON.parse(userId);\n        this.apiorder.getOrdersByUserIdAndStatusFalse(userid.id).subscribe(orders => {\n          for (let order of orders) {\n            order.status = false;\n            this.apiorder.updateOrderStatus(order.id).subscribe(() => {\n              console.log(`Status updated to false for order with ID: ${order.id}`);\n            });\n          }\n        });\n      } else {\n        console.error(\"User ID not found in local storage\");\n      }\n    }\n  }\n  openproductId(id) {\n    this.routes.navigate(['/products', id]);\n  }\n  static #_ = this.ɵfac = function OrdersListComponent_Factory(t) {\n    return new (t || OrdersListComponent)(i0.ɵɵdirectiveInject(i1.OrdersService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ApiProductsService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OrdersListComponent,\n    selectors: [[\"app-orders-list\"]],\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 10,\n    vars: 5,\n    consts: [[1, \"container\", \"mt-5\"], [1, \"row\"], [\"class\", \"col-md-4 mb-4\", 3, \"hidden\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-6\", 3, \"hidden\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"col-md-4\", \"mb-4\", 3, \"hidden\"], [1, \"card\", \"mb-3\"], [\"alt\", \"Product Image\", 1, \"card-img-top\", 3, \"src\"], [1, \"card-body\"], [1, \"card-title\"], [1, \"card-text\"], [1, \"input-group\", \"mb-3\"], [\"type\", \"number\", \"ngModel\", \"countitem\", \"name\", \"quantity\", \"min\", \"1\", 1, \"form-control\", 3, \"max\"]],\n    template: function OrdersListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtemplate(2, OrdersListComponent_div_2_Template, 15, 10, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 3)(5, \"h4\");\n        i0.ɵɵtext(6);\n        i0.ɵɵpipe(7, \"currency\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function OrdersListComponent_Template_button_click_8_listener() {\n          return ctx.purchaseItems();\n        });\n        i0.ɵɵtext(9, \"Purchase Items\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.orders);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.orders === false);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Total Price: \", i0.ɵɵpipeBind1(7, 3, ctx.calculateTotalPrice()), \"\");\n      }\n    },\n    dependencies: [i4.NgForOf, i5.DefaultValueAccessor, i5.NumberValueAccessor, i5.NgControlStatus, i5.MinValidator, i5.MaxValidator, i5.NgModel, i4.CurrencyPipe],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","OrdersListComponent","constructor","apiorder","routes","apiproduct","ngOnInit","User","localStorage","getItem","user_id","JSON","parse","console","log","id","getOrdersByUserIdAndStatusFalse","subscribe","prod","orders","product","getproductbyid","ngOnChanges","calculateTotalPrice","total","order","status","price","purchaseItems","confirm","newQuantity","Number","quantity","updateProductQuantity","userId","userid","updateOrderStatus","error","openproductId","navigate","selectors","features","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/mahmoud/Downloads/app-start/src/app/Components/orders-list/orders-list.component.html","/home/mahmoud/Downloads/app-start/src/app/Components/orders-list/orders-list.component.ts"],"sourcesContent":["<div class=\"container mt-5\">\n    <div class=\"row\">\n      <div class=\"col-md-4 mb-4\" *ngFor=\"let prod of orders let i = index\" [hidden]='prod.status===false'>\n        <div class=\"card mb-3\" [style.background-color]=\"(prod.quantity == 1) ? 'yellow' : 'white'\">\n          <img [src]=\"prod.imgURL\" class=\"card-img-top\" alt=\"Product Image\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{ prod.name }}</h5>\n            <p class=\"card-text\">Price: {{ prod.price | currency }}</p>\n            <p class=\"card-text\">Stock: {{ prod.quantity }}</p>\n            <div class=\"input-group mb-3\">\n              <input type=\"number\" ngModel=\"countitem\" class=\"form-control\" name=\"quantity\" min=\"1\" max=\"{{ prod.quantity }}\">\n            </div>\n            <button class=\"btn btn-primary\" (click)=\"openproductId(prod.id)\">Details</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\" [hidden]='orders===false'>\n        <h4>Total Price: {{ calculateTotalPrice() | currency }}</h4>\n        <button class=\"btn btn-primary\" (click)=\"purchaseItems()\">Purchase Items</button>\n      </div>\n    </div>\n  </div>\n  ","import { Component, OnChanges, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Iorders } from 'src/app/Models/iorders';\nimport { Iproduct } from 'src/app/Models/iproduct';\nimport { ApiProductsService } from 'src/app/Services/api-products.service';\nimport { OrdersService } from 'src/app/Services/orders.service';\n\n@Component({\n  selector: 'app-orders-list',\n  templateUrl: './orders-list.component.html',\n  styleUrls: ['./orders-list.component.css']\n})\nexport class OrdersListComponent implements OnInit ,OnChanges {\n  orders:Iorders[] | any\n  product:Iproduct[]  | any\n  constructor(\n    private apiorder:OrdersService,\n    private routes:Router,\n    private apiproduct:ApiProductsService\n  ){\n\n  }\n  ngOnInit(): void {\n    let User = localStorage.getItem('user')\n  if(User){\n   let user_id = JSON.parse(User) \n     console.log(user_id.id)\n     \n      this.apiorder.getOrdersByUserIdAndStatusFalse(user_id.id).subscribe((prod)=>{\n      this.orders = prod\n      this.product = prod\n      })\n      this.apiproduct.getproductbyid(this.orders.id).subscribe((prod)=>{\n        this.product = prod\n      })\n      // this.apiproduct.getallproduct().subscribe((prod)=>{\n      // this.product = prod\n      // })\n    }\n  }\n  ngOnChanges(): void {\n\n  }\n  calculateTotalPrice(): number {\n    let total = 0;\n    if (this.orders) {\n      for (let order of this.orders) {\n        if(order.status==true){\n        total += order.price;\n\n        }\n      }\n    }\n    return total;\n  }\n  \n\n  // purchaseItems(): void {\n  //   if (confirm(\"Are you sure you want to purchase these items?\")) {\n  //     for (let order of this.product) {\n  //       const newQuantity = Number(order.quantity - order.countitem);\n  //       this.apiproduct.updateProductQuantity(order.id, newQuantity).subscribe(\n  //         () => {\n  //           console.log(`Quantity updated for product with ID: ${order.id}`);\n  //         }\n  //       );\n  //     }\n  \n  //     // Remove all orders associated with the current user\n  //     let userId = localStorage.getItem('user');\n  //     if (userId) {\n  //       let userid= JSON.parse(userId)\n  //       console.log(typeof(userid.id))\n  //       this.apiorder.removeallbyuserid(userid.id).subscribe(\n  //         () => {\n  //           console.log('All orders removed successfully');\n  //         }\n  //       );\n  //       this.apiorder.removeall().subscribe(\n  //         () => {\n  //           console.log('All orders removed successfully');\n  //         }\n  //       );\n  //     } else {\n  //       console.error(\"User ID not found in local storage\");\n  //     }\n  //   }\n  // }\n  purchaseItems(): void {\n    if (confirm(\"Are you sure you want to purchase these items?\")) {\n      for (let order of this.product) {\n        const newQuantity = Number(order.quantity - 3);\n        this.apiproduct.updateProductQuantity(order.id, newQuantity).subscribe(\n          () => {\n            console.log(`Quantity updated for product with ID: ${order.id}`);\n          }\n        );\n      }\n      // Change status of orders to false\n      let userId = localStorage.getItem('user');\n      if (userId) {\n        let userid = JSON.parse(userId);\n        this.apiorder.getOrdersByUserIdAndStatusFalse(userid.id).subscribe((orders: Iorders[]) => {\n          for (let order of orders) {\n            order.status = false;\n            this.apiorder.updateOrderStatus(order.id).subscribe(() => {\n              console.log(`Status updated to false for order with ID: ${order.id}`);\n            });\n          }\n        });    \n      } else {\n        console.error(\"User ID not found in local storage\");\n      }\n    }\n  }\n  \n  \n  \n\n  openproductId(id:number){\n    this.routes.navigate(['/products',id])\n    }\n\n}\n      // for (let order of this.product) {\n      //   const newQuantity = Number(order.quantity - order.countitem);\n      //   this.apiproduct.updateProductQuantity(order.id, newQuantity).subscribe(\n      //     () => {\n      //       console.log(`Quantity updated for product with ID: ${order.id}`);\n      //     }\n      //   );\n      // }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}