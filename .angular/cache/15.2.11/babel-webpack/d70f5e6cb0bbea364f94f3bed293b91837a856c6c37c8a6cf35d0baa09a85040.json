{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Services/orders.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction OrdersListComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6);\n    i0.ɵɵelement(2, \"img\", 7);\n    i0.ɵɵelementStart(3, \"div\", 8)(4, \"h5\", 9);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 10);\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"currency\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\", 10);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 11);\n    i0.ɵɵelement(12, \"input\", 12, 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function OrdersListComponent_div_2_Template_button_click_14_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const prod_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.openproductId(prod_r1.id));\n    });\n    i0.ɵɵtext(15, \"Details\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const prod_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", prod_r1.quantity == 1 ? \"yellow\" : \"white\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", prod_r1.imgURL, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(prod_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Price: \", i0.ɵɵpipeBind1(8, 7, prod_r1.price), \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Stock: \", prod_r1.quantity, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"max\", prod_r1.quantity);\n  }\n}\nexport class OrdersListComponent {\n  constructor(apiorder, routes) {\n    this.apiorder = apiorder;\n    this.routes = routes;\n  }\n  ngOnInit() {\n    let User = localStorage.getItem('user');\n    if (User) {\n      let user_id = JSON.parse(User);\n      console.log(user_id);\n      this.apiorder.getordersbyuserid(user_id).subscribe(prod => {\n        this.orders = prod;\n      });\n    }\n  }\n  ngOnChanges() {}\n  calculateTotalPrice() {\n    // Add logic to calculate the total price of selected items\n    // You can iterate over the selectedItems array and sum up the prices\n    return 0; // Return the total price\n  }\n\n  purchaseItems() {\n    // Add logic to handle the purchase action\n    // This can involve submitting the selectedItems array to a backend service or performing any other necessary actions\n  }\n  addToCart(product, quantity) {\n    // Add logic to add the selected product to the cart with the specified quantity\n    // You can push the product and its quantity to the selectedItems array\n  }\n  openproductId(id) {\n    this.routes.navigate(['/products', id]);\n  }\n  static #_ = this.ɵfac = function OrdersListComponent_Factory(t) {\n    return new (t || OrdersListComponent)(i0.ɵɵdirectiveInject(i1.OrdersService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OrdersListComponent,\n    selectors: [[\"app-orders-list\"]],\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 10,\n    vars: 4,\n    consts: [[1, \"container\", \"mt-5\"], [1, \"row\"], [\"class\", \"col-md-4 mb-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-6\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"col-md-4\", \"mb-4\"], [1, \"card\", \"mb-3\"], [\"alt\", \"Product Image\", 1, \"card-img-top\", 3, \"src\"], [1, \"card-body\"], [1, \"card-title\"], [1, \"card-text\"], [1, \"input-group\", \"mb-3\"], [\"type\", \"number\", \"name\", \"quantity\", \"min\", \"1\", 1, \"form-control\", 3, \"max\"], [\"item\", \"\"]],\n    template: function OrdersListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtemplate(2, OrdersListComponent_div_2_Template, 16, 9, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 3)(5, \"h4\");\n        i0.ɵɵtext(6);\n        i0.ɵɵpipe(7, \"currency\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function OrdersListComponent_Template_button_click_8_listener() {\n          return ctx.purchaseItems();\n        });\n        i0.ɵɵtext(9, \"Purchase Items\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.orders);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"Total Price: \", i0.ɵɵpipeBind1(7, 2, ctx.calculateTotalPrice()), \"\");\n      }\n    },\n    dependencies: [i3.NgForOf, i3.CurrencyPipe],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;;;IAEMA,8BAAqE;IAEjEA,yBAAkE;IAClEA,8BAAuB;IACEA,YAAe;IAAAA,iBAAK;IAC3CA,6BAAqB;IAAAA,YAAkC;;IAAAA,iBAAI;IAC3DA,6BAAqB;IAAAA,aAA0B;IAAAA,iBAAI;IACnDA,gCAA8B;IAC5BA,iCAAkG;IACpGA,iBAAM;IACNA,kCAAiE;IAAjCA;MAAA;MAAA;MAAA;MAAA,OAASA,+CAAsB;IAAA,EAAC;IAACA,wBAAO;IAAAA,iBAAS;;;;IAT9DA,eAAoE;IAApEA,8EAAoE;IACpFA,eAAmB;IAAnBA,sDAAmB;IAECA,eAAe;IAAfA,kCAAe;IACjBA,eAAkC;IAAlCA,yEAAkC;IAClCA,eAA0B;IAA1BA,sDAA0B;IAE2BA,eAAyB;IAAzBA,iDAAyB;;;ACC/G,OAAM,MAAOC,mBAAmB;EAE9BC,YAAoBC,QAAsB,EAChCC,MAAa;IADH,aAAQ,GAARD,QAAQ;IAClB,WAAM,GAANC,MAAM;EAGhB;EACAC,QAAQ;IACN,IAAIC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACvC,IAAGF,IAAI,EAAC;MACT,IAAIG,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;MAC5BM,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;MACnB,IAAI,CAACN,QAAQ,CAACW,iBAAiB,CAACL,OAAO,CAAC,CAACM,SAAS,CAAEC,IAAI,IAAG;QAC3D,IAAI,CAACC,MAAM,GAAGD,IAAI;MACtB,CAAC,CAAC;;EAIF;EACAE,WAAW,IAEX;EACAC,mBAAmB;IACjB;IACA;IACA,OAAO,CAAC,CAAC,CAAC;EACZ;;EAEAC,aAAa;IACX;IACA;EAAA;EAEFC,SAAS,CAACC,OAAiB,EAAEC,QAAgB;IAC3C;IACA;EAAA;EAEFC,aAAa,CAACC,EAAS;IACrB,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,WAAW,EAACD,EAAE,CAAC,CAAC;EACtC;EAAC;qBAtCQxB,mBAAmB;EAAA;EAAA;UAAnBA,mBAAmB;IAAA0B;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDXhChC,8BAA4B;QAEtBA,qEAcM;QACRA,iBAAM;QACNA,8BAAiB;QAETA,YAAmD;;QAAAA,iBAAK;QAC5DA,iCAA0D;QAA1BA;UAAA,OAASiC,mBAAe;QAAA,EAAC;QAACjC,8BAAc;QAAAA,iBAAS;;;QAnBvCA,eAAU;QAAVA,oCAAU;QAkBhDA,eAAmD;QAAnDA,2FAAmD","names":["i0","OrdersListComponent","constructor","apiorder","routes","ngOnInit","User","localStorage","getItem","user_id","JSON","parse","console","log","getordersbyuserid","subscribe","prod","orders","ngOnChanges","calculateTotalPrice","purchaseItems","addToCart","product","quantity","openproductId","id","navigate","selectors","features","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/mahmoud/Downloads/app-start/src/app/Components/orders-list/orders-list.component.html","/home/mahmoud/Downloads/app-start/src/app/Components/orders-list/orders-list.component.ts"],"sourcesContent":["<div class=\"container mt-5\">\n    <div class=\"row\">\n      <div class=\"col-md-4 mb-4\" *ngFor=\"let prod of orders let i = index\">\n        <div class=\"card mb-3\" [style.background-color]=\"(prod.quantity == 1) ? 'yellow' : 'white'\">\n          <img [src]=\"prod.imgURL\" class=\"card-img-top\" alt=\"Product Image\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{ prod.name }}</h5>\n            <p class=\"card-text\">Price: {{ prod.price | currency }}</p>\n            <p class=\"card-text\">Stock: {{ prod.quantity }}</p>\n            <div class=\"input-group mb-3\">\n              <input type=\"number\" #item class=\"form-control\" name=\"quantity\" min=\"1\" max=\"{{ prod.quantity }}\">\n            </div>\n            <button class=\"btn btn-primary\" (click)=\"openproductId(prod.id)\">Details</button>\n\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <h4>Total Price: {{ calculateTotalPrice() | currency }}</h4>\n        <button class=\"btn btn-primary\" (click)=\"purchaseItems()\">Purchase Items</button>\n      </div>\n    </div>\n  </div>\n  ","import { Component, OnChanges, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Iorders } from 'src/app/Models/iorders';\nimport { Iproduct } from 'src/app/Models/iproduct';\nimport { OrdersService } from 'src/app/Services/orders.service';\n\n@Component({\n  selector: 'app-orders-list',\n  templateUrl: './orders-list.component.html',\n  styleUrls: ['./orders-list.component.css']\n})\nexport class OrdersListComponent implements OnInit ,OnChanges {\n  orders:Iorders[] | any\n  constructor(private apiorder:OrdersService,\n    private routes:Router\n  ){\n\n  }\n  ngOnInit(): void {\n    let User = localStorage.getItem('user')\n    if(User){\n   let user_id = JSON.parse(User) \n     console.log(user_id)\n      this.apiorder.getordersbyuserid(user_id).subscribe((prod)=>{\n      this.orders = prod\n  })\n    }\n    \n \n  }\n  ngOnChanges(): void {\n\n  }\n  calculateTotalPrice(): number {\n    // Add logic to calculate the total price of selected items\n    // You can iterate over the selectedItems array and sum up the prices\n    return 0; // Return the total price\n  }\n\n  purchaseItems(): void {\n    // Add logic to handle the purchase action\n    // This can involve submitting the selectedItems array to a backend service or performing any other necessary actions\n  }\n  addToCart(product: Iproduct, quantity: string): void {\n    // Add logic to add the selected product to the cart with the specified quantity\n    // You can push the product and its quantity to the selectedItems array\n  }\n  openproductId(id:number){\n    this.routes.navigate(['/products',id])\n    }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}